import os
from typing import Dict, Any
from jira import JIRA
from loguru import logger

class JiraNotifier:
    """
    Handles creating and updating Jira tickets for incidents.
    """
    
    def __init__(self, config: Dict[str, Any]):
        """
        Initialize the Jira notifier.
        
        Args:
            config: Jira configuration dictionary
        """
        self.server = config['server']
        self.project_key = config['project_key']
        self.issue_type = config['issue_type']
        self.labels = config.get('labels', [])
        
        # Initialize Jira client
        self.client = JIRA(
            server=self.server,
            basic_auth=(
                os.getenv('JIRA_USER_EMAIL'),
                os.getenv('JIRA_API_TOKEN')
            )
        )
    
    def format_description(self,
                         description: str,
                         severity: str,
                         metadata: Dict[str, Any]) -> str:
        """
        Format the Jira ticket description.
        
        Args:
            description: Issue description
            severity: Issue severity
            metadata: Additional metadata
            
        Returns:
            Formatted description in Jira markup
        """
        metadata_text = '\n'.join([f"*{k}:* {v}" for k, v in metadata.items()])
        
        return f"""
h2. Issue Details
{description}

h2. Severity
{severity.upper()}

h2. Additional Information
{metadata_text}

----
_Generated by Automated Issue Detection System_
        """
    
    def create_incident(self,
                       title: str,
                       description: str,
                       severity: str,
                       metadata: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        Create a new Jira incident ticket.
        
        Args:
            title: Incident title
            description: Incident description
            severity: Incident severity level
            metadata: Additional incident metadata
            
        Returns:
            Dictionary containing the created ticket details
            
        Raises:
            Exception: If ticket creation fails
        """
        try:
            # Prepare issue fields
            issue_dict = {
                'project': {'key': self.project_key},
                'summary': f"[{severity.upper()}] {title}",
                'description': self.format_description(
                    description,
                    severity,
                    metadata or {}
                ),
                'issuetype': {'name': self.issue_type},
                'labels': self.labels + [f"severity_{severity}"],
                'priority': self.get_priority(severity)
            }
            
            # Create issue
            issue = self.client.create_issue(fields=issue_dict)
            
            logger.info(f"Created Jira ticket: {issue.key}")
            return {
                'ticket_id': issue.key,
                'url': f"{self.server}/browse/{issue.key}"
            }
            
        except Exception as e:
            error_msg = f"Failed to create Jira ticket: {str(e)}"
            logger.error(error_msg)
            raise Exception(error_msg)
    
    def update_incident(self,
                       ticket_id: str,
                       status: str,
                       comment: str = None,
                       metadata: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        Update an existing Jira incident ticket.
        
        Args:
            ticket_id: Jira ticket ID
            status: New ticket status
            comment: Optional comment to add
            metadata: Additional update metadata
            
        Returns:
            Dictionary containing the update status
            
        Raises:
            Exception: If ticket update fails
        """
        try:
            issue = self.client.issue(ticket_id)
            
            # Update status if different
            if status.lower() != issue.fields.status.name.lower():
                transitions = self.client.transitions(issue)
                for t in transitions:
                    if t['name'].lower() == status.lower():
                        self.client.transition_issue(issue, t['id'])
                        break
            
            # Add comment if provided
            if comment:
                self.client.add_comment(issue, comment)
            
            # Update metadata if provided
            if metadata:
                metadata_comment = "Updated metadata:\n" + \
                    '\n'.join([f"* {k}: {v}" for k, v in metadata.items()])
                self.client.add_comment(issue, metadata_comment)
            
            logger.info(f"Updated Jira ticket: {ticket_id}")
            return {
                'ticket_id': ticket_id,
                'status': status,
                'url': f"{self.server}/browse/{ticket_id}"
            }
            
        except Exception as e:
            error_msg = f"Failed to update Jira ticket: {str(e)}"
            logger.error(error_msg)
            raise Exception(error_msg)
    
    def get_priority(self, severity: str) -> Dict[str, str]:
        """
        Map severity level to Jira priority.
        
        Args:
            severity: Issue severity level
            
        Returns:
            Dictionary containing Jira priority name
        """
        priority_map = {
            'critical': 'Highest',
            'high': 'High',
            'warning': 'Medium'
        }
        
        return {'name': priority_map.get(severity, 'Medium')}

    def send(self,
             title: str,
             message: str,
             severity: str,
             metadata: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        Send an alert by creating a Jira issue.
        
        Args:
            title: Alert title
            message: Alert message
            severity: Alert severity
            metadata: Additional metadata
            
        Returns:
            Dictionary containing the send status
        """
        logger.debug(f"Creating Jira issue - Title: {title}, Severity: {severity}")
        
        try:
            # Format metadata as string if present
            metadata_str = ""
            if metadata:
                metadata_str = "\n\nMetadata:\n" + "\n".join([f"* {k}: {v}" for k, v in metadata.items()])
            
            # Create issue fields
            fields = {
                'project': {'key': self.project_key},
                'summary': title,
                'description': f"{message}{metadata_str}\n\nSeverity: {severity.upper()}",
                'issuetype': {'name': self.issue_type},
                'labels': self.labels + [severity.lower()]
            }
            
            # Create the issue
            issue = self.client.create_issue(fields=fields)
            logger.info(f"Successfully created Jira issue: {issue.key}")
            
            return {
                'status': 'sent',
                'issue_key': issue.key,
                'issue_url': f"{self.server}/browse/{issue.key}"
            }
            
        except Exception as e:
            error_msg = f"Failed to create Jira issue: {str(e)}"
            logger.error(error_msg)
            return {
                'status': 'failed',
                'error': error_msg
            } 